/**
 * MappingMapToShortInfo.java
 *
 * This file was generated by MapForce 2019.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.mapforce;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import java.util.*;

public class MappingMapToShortInfo extends com.altova.TraceProvider 
{
	private boolean runDoesCloseAll = true;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}

	
	static class main implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_SectionedPage_Instance;
	
		public main(com.altova.mapforce.IMFNode var1_SectionedPage_Instance)
		{
			this.var1_SectionedPage_Instance = var1_SectionedPage_Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 2;
			Object current;
			main closure;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("ShortInfoWithHTML", ""), (new seq1_join(closure.var1_SectionedPage_Instance)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_SectionedPage_Instance;
	
		public seq1_join(com.altova.mapforce.IMFNode var1_SectionedPage_Instance)
		{
			this.var1_SectionedPage_Instance = var1_SectionedPage_Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_join closure;
			IEnumerator var2_Page;
			IEnumerator var3_Item;
			public Enumerator(seq1_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("xsi:noNamespaceSchemaLocation", "http://www.w3.org/2001/XMLSchema-instance"), com.altova.functions.Core.box("file:///C:/Users/A054680/Documents/Altova/MapForce2019/MapForceExamples/ShortInfo.xsd"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var2_Page = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Page", ""), closure.var1_SectionedPage_Instance)).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				if (!var2_Page.moveNext()) {state = 4; return false; }
				var3_Item = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Item", ""), ((com.altova.mapforce.IMFNode)(var2_Page.current())))).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				if( var2_Page != null ) { var2_Page.close(); var2_Page = null; }
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var3_Item.moveNext()) {state = 6; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Info", ""), (new seq2_join(((com.altova.mapforce.IMFNode)(var3_Item.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 3;				
				if( var3_Item != null ) { var3_Item.close(); var3_Item = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var3_Item != null ) { var3_Item.close(); var3_Item = null; }
				if( var2_Page != null ) { var2_Page.close(); var2_Page = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur;
	
		public seq2_join(com.altova.mapforce.IMFNode var1_cur)
		{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_join closure;
			IEnumerator var2_MainSection;
			IEnumerator var3_SubSection;
			public Enumerator(seq2_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Title", ""), com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Title", ""), closure.var1_cur)))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var2_MainSection = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("MainSection", ""), closure.var1_cur)).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				if (!var2_MainSection.moveNext()) {state = 4; return false; }
				var3_SubSection = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("SubSection", ""), ((com.altova.mapforce.IMFNode)(var2_MainSection.current())))).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				if( var2_MainSection != null ) { var2_MainSection.close(); var2_MainSection = null; }
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var3_SubSection.moveNext()) {state = 6; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Description", ""), com.altova.functions.Core.box(com.altova.functions.Core.createCData(com.altova.CoreTypes.nodeToString(com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("MixedContent", ""), (new seq3_join(((com.altova.mapforce.IMFNode)(var3_SubSection.current())))))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 3;				
				if( var3_SubSection != null ) { var3_SubSection.close(); var3_SubSection = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var3_SubSection != null ) { var3_SubSection.close(); var3_SubSection = null; }
				if( var2_MainSection != null ) { var2_MainSection.close(); var2_MainSection = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur;
	
		public seq3_join(com.altova.mapforce.IMFNode var1_cur)
		{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_join closure;
			IEnumerator var2_select_children;
			IEnumerator var3_cond_box;
			IEnumerator var4_cond_box;
			public Enumerator(seq3_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_select_children = (com.altova.functions.Core.selectChildren(closure.var1_cur)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 6;				
				if (!var2_select_children.moveNext()) {state = 3; return false; }
				if (!((((((com.altova.mapforce.IMFNode)(var2_select_children.current()))).getNodeKind()) & (IMFNode.MFNodeKind_Text)) != (0))) {state = 6; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_select_children.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_select_children != null ) { var2_select_children.close(); var2_select_children = null; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				var3_cond_box = ((new seq4_cond_box(((com.altova.mapforce.IMFNode)(var2_select_children.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 7;				
				if (!var3_cond_box.moveNext()) {state = 8; return false; }
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("<b>", com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var3_cond_box.current())))), "</b>");
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 10;				
				if( var3_cond_box != null ) { var3_cond_box.close(); var3_cond_box = null; }
				var4_cond_box = ((new seq5_cond_box(((com.altova.mapforce.IMFNode)(var2_select_children.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 10;				
				if (!var4_cond_box.moveNext()) {state = 11; return false; }
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat("<i>", com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var4_cond_box.current())))), "</i>");
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 2;				
				if( var4_cond_box != null ) { var4_cond_box.close(); var4_cond_box = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var3_cond_box != null ) { var3_cond_box.close(); var3_cond_box = null; }
				if( var4_cond_box != null ) { var4_cond_box.close(); var4_cond_box = null; }
				if( var2_select_children != null ) { var2_select_children.close(); var2_select_children = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq4_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_sd;
	
		public seq4_cond_box(com.altova.mapforce.IMFNode var1_sd)
		{
			this.var1_sd = var1_sd;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq4_cond_box closure;
			public Enumerator(seq4_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.nodeNameEqual(com.altova.functions.Core.createQName("Trademark", ""), closure.var1_sd))) {state = 0; return false; }
				current = closure.var1_sd;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq5_cond_box implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_sd;
	
		public seq5_cond_box(com.altova.mapforce.IMFNode var1_sd)
		{
			this.var1_sd = var1_sd;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq5_cond_box closure;
			public Enumerator(seq5_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.nodeNameEqual(com.altova.functions.Core.createQName("Keyword", ""), closure.var1_sd))) {state = 0; return false; }
				current = closure.var1_sd;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class Outer implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_SectionedPage_Instance;
	
		public Outer(com.altova.mapforce.IMFNode var1_SectionedPage_Instance)
		{
			this.var1_SectionedPage_Instance = var1_SectionedPage_Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var2_box;
			public Enumerator(Outer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_box = ((new main(closure.var1_SectionedPage_Instance))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_box.moveNext()) {state = 3; return false; }
				current = var2_box.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_box != null ) { var2_box.close(); var2_box = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_box != null ) { var2_box.close(); var2_box = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances
	protected org.w3c.dom.Node varSectionedPage2Instance;

	public void run(String SectionedPage2SourceFilename, String ShortInfo2TargetFilename) throws Exception {
		// open source streams
		writeTrace("Loading " + SectionedPage2SourceFilename + "...\n");
		com.altova.io.FileInput SectionedPage2Source = new com.altova.io.FileInput(SectionedPage2SourceFilename);
		// open target stream
		com.altova.io.FileOutput ShortInfo2Target = new com.altova.io.FileOutput(ShortInfo2TargetFilename);

		// run
	
		run(SectionedPage2Source, ShortInfo2Target);

		// close source streams
		SectionedPage2Source.close();
		// close target stream
		writeTrace("Saving " + ShortInfo2TargetFilename + "...\n");
		ShortInfo2Target.close();
	}


	// main entry point

	public void run(com.altova.io.Input SectionedPage2Source, com.altova.io.Output ShortInfo2Target) throws Exception {
		// Open the source(s)
		org.w3c.dom.Document doc_SectionedPage2 = XmlTreeOperations.loadDocument(SectionedPage2Source);
		varSectionedPage2Instance = doc_SectionedPage2;
		if (runDoesCloseAll)
			SectionedPage2Source.close();

		// Create the target
		org.w3c.dom.Document ShortInfo2Doc = (ShortInfo2Target.getType() == com.altova.io.Output.IO_DOM) ? ShortInfo2Target.getDocument() : XmlTreeOperations.createDocument();

		// Execute mapping

		main mapping = new main(new com.altova.xml.DOMDocumentAsMFNodeAdapter(varSectionedPage2Instance, SectionedPage2Source.getFilename()));

		com.altova.xml.MFDOMWriter.write(mapping, ShortInfo2Doc);
		// Close the target
		XmlTreeOperations.saveDocument(ShortInfo2Doc, ShortInfo2Target, "UTF-8", false, false, true, false);

		
		if (runDoesCloseAll)
		{
			SectionedPage2Source.close();
			ShortInfo2Target.close();
		}
	}



}
