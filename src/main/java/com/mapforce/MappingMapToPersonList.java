/**
 * MappingMapToPersonList.java
 *
 * This file was generated by MapForce 2019.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.mapforce;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import java.util.*;

public class MappingMapToPersonList extends com.altova.TraceProvider 
{
	private boolean runDoesCloseAll = true;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}

	
	static class main implements IEnumerable
	{
	
		public main()
		{
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 2;
			Object current;
			main closure;
			IEnumerator var1_resolve_filename;
			com.altova.mapforce.IMFNode var2_instance;
			com.altova.mapforce.IMFNode var3_document;
			com.altova.mapforce.IEnumerable var4_Altova;
			java.lang.String var5_document_uri;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_2() throws Exception {
				state = 3;				
				var1_resolve_filename = (com.altova.functions.Core.resolveFilename("C:/Users/A054680/Documents/Altova/MapForce2019/MapForceExamples/Nanonull-*.xml")).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 3;				
				if (!var1_resolve_filename.moveNext()) {state = 4; return false; }
				{
							com.altova.io.Input file = com.altova.io.StreamInput.createInput(((java.lang.String)(var1_resolve_filename.current())));
							var2_instance = new com.altova.xml.DOMDocumentAsMFNodeAdapter(XmlTreeOperations.loadDocument(file), file.getFilename());
							file.close();
				}
				var3_document = var2_instance;
				var4_Altova = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Altova", ""), var3_document));
				var5_document_uri = (java.lang.String)com.altova.functions.Core.first(com.altova.functions.Core.documentURI(com.altova.functions.Core.box(var3_document)));
				current = com.altova.functions.Core.resultDocument(com.altova.functions.Core.concat("Persons-", com.altova.functions.Core.substring(var5_document_uri, com.altova.CoreTypes.decimalToDouble(com.altova.functions.Core.add(com.mapforce.core.get_position_of_last_delimiter.eval(var5_document_uri, "/", "\\"), new java.math.BigDecimal("1"))), com.altova.CoreTypes.integerToDouble(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.functions.Core.stringLength(var5_document_uri)))))), "UTF-8", (new seq1_seq_(var5_document_uri, var4_Altova)));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				if( var1_resolve_filename != null ) { var1_resolve_filename.close(); var1_resolve_filename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var1_resolve_filename != null ) { var1_resolve_filename.close(); var1_resolve_filename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_seq_ implements IEnumerable
	{
		java.lang.String var1_document_uri;
		com.altova.mapforce.IEnumerable var2_Altova;
	
		public seq1_seq_(java.lang.String var1_document_uri, com.altova.mapforce.IEnumerable var2_Altova)
		{
			this.var1_document_uri = var1_document_uri;
			this.var2_Altova = var2_Altova;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_seq_ closure;
			public Enumerator(seq1_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createComment(com.altova.functions.Core.concat("Generated by Altova MapForce (http://www.altova.com/mapforce) using ", "C:\\Users\\A054680\\Documents\\Altova\\MapForce2019\\MapForceExamples\\MultipleInputToMultipleOutputFiles.mfd"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("PersonList", ""), (new seq2_join(closure.var1_document_uri, closure.var2_Altova)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_join implements IEnumerable
	{
		java.lang.String var1_document_uri;
		com.altova.mapforce.IEnumerable var2_Altova;
	
		public seq2_join(java.lang.String var1_document_uri, com.altova.mapforce.IEnumerable var2_Altova)
		{
			this.var1_document_uri = var1_document_uri;
			this.var2_Altova = var2_Altova;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_join closure;
			IEnumerator var3_Altova;
			IEnumerator var4_Office;
			IEnumerator var5_Department;
			IEnumerator var6_Person;
			public Enumerator(seq2_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("xsi:noNamespaceSchemaLocation", "http://www.w3.org/2001/XMLSchema-instance"), com.altova.functions.Core.box("PersonList.xsd"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createComment(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.functions.Core.count((new seq3_join(closure.var2_Altova)))))), " Persons mapped from input file "), closure.var1_document_uri));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var3_Altova = (closure.var2_Altova).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var3_Altova.moveNext()) {state = 5; return false; }
				var4_Office = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Office", ""), ((com.altova.mapforce.IMFNode)(var3_Altova.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				if( var3_Altova != null ) { var3_Altova.close(); var3_Altova = null; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 8;				
				if (!var4_Office.moveNext()) {state = 7; return false; }
				var5_Department = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Department", ""), ((com.altova.mapforce.IMFNode)(var4_Office.current())))).enumerator();
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				if( var4_Office != null ) { var4_Office.close(); var4_Office = null; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 10;				
				if (!var5_Department.moveNext()) {state = 9; return false; }
				var6_Person = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Person", ""), ((com.altova.mapforce.IMFNode)(var5_Department.current())))).enumerator();
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 6;				
				if( var5_Department != null ) { var5_Department.close(); var5_Department = null; }
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 10;				
				if (!var6_Person.moveNext()) {state = 11; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Person", ""), (new seq4_seq_(((com.altova.mapforce.IMFNode)(var6_Person.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 8;				
				if( var6_Person != null ) { var6_Person.close(); var6_Person = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var6_Person != null ) { var6_Person.close(); var6_Person = null; }
				if( var5_Department != null ) { var5_Department.close(); var5_Department = null; }
				if( var4_Office != null ) { var4_Office.close(); var4_Office = null; }
				if( var3_Altova != null ) { var3_Altova.close(); var3_Altova = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_Altova;
	
		public seq3_join(com.altova.mapforce.IEnumerable var1_Altova)
		{
			this.var1_Altova = var1_Altova;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_join closure;
			IEnumerator var2_Altova;
			IEnumerator var3_Office;
			IEnumerator var4_Department;
			IEnumerator var5_Person;
			public Enumerator(seq3_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_Altova = (closure.var1_Altova).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var2_Altova.moveNext()) {state = 3; return false; }
				var3_Office = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Office", ""), ((com.altova.mapforce.IMFNode)(var2_Altova.current())))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_Altova != null ) { var2_Altova.close(); var2_Altova = null; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var3_Office.moveNext()) {state = 5; return false; }
				var4_Department = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Department", ""), ((com.altova.mapforce.IMFNode)(var3_Office.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				if( var3_Office != null ) { var3_Office.close(); var3_Office = null; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 8;				
				if (!var4_Department.moveNext()) {state = 7; return false; }
				var5_Person = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Person", ""), ((com.altova.mapforce.IMFNode)(var4_Department.current())))).enumerator();
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				if( var4_Department != null ) { var4_Department.close(); var4_Department = null; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 8;				
				if (!var5_Person.moveNext()) {state = 9; return false; }
				current = var5_Person.current();
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 6;				
				if( var5_Person != null ) { var5_Person.close(); var5_Person = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var5_Person != null ) { var5_Person.close(); var5_Person = null; }
				if( var4_Department != null ) { var4_Department.close(); var4_Department = null; }
				if( var3_Office != null ) { var3_Office.close(); var3_Office = null; }
				if( var2_Altova != null ) { var2_Altova.close(); var2_Altova = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq4_seq_ implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur;
	
		public seq4_seq_(com.altova.mapforce.IMFNode var1_cur)
		{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq4_seq_ closure;
			com.altova.mapforce.IMFNode var2_Title;
			com.altova.mapforce.IMFNode var3_First;
			com.altova.mapforce.IMFNode var4_Last;
			public Enumerator(seq4_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_Title = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Title", ""), closure.var1_cur));
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("role", ""), (new seq5_nil(var2_Title)));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var3_First = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("First", ""), closure.var1_cur));
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("First", ""), (new seq7_nil(var3_First)));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var4_Last = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Last", ""), closure.var1_cur));
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Last", ""), (new seq8_nil(var4_Last)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq5_nil implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur;
	
		public seq5_nil(com.altova.mapforce.IMFNode var1_cur)
		{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq5_nil closure;
			com.altova.mapforce.IEnumerable var2_nil;
			public Enumerator(seq5_nil closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_nil = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("nil", "http://www.w3.org/2001/XMLSchema-instance"), closure.var1_cur));
				if (!((Boolean)com.altova.functions.Core.first((new seq6_if_exists(var2_nil))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_cur);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq6_if_exists implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_nil;
	
		public seq6_if_exists(com.altova.mapforce.IEnumerable var1_nil)
		{
			this.var1_nil = var1_nil;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq6_if_exists closure;
			public Enumerator(seq6_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_nil))) {state = 2; return false; }
				current = com.altova.CoreTypes.parseBoolean(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_nil)));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq7_nil implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur;
	
		public seq7_nil(com.altova.mapforce.IMFNode var1_cur)
		{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq7_nil closure;
			com.altova.mapforce.IEnumerable var2_nil;
			public Enumerator(seq7_nil closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_nil = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("nil", "http://www.w3.org/2001/XMLSchema-instance"), closure.var1_cur));
				if (!((Boolean)com.altova.functions.Core.first((new seq6_if_exists(var2_nil))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_cur);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq8_nil implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur;
	
		public seq8_nil(com.altova.mapforce.IMFNode var1_cur)
		{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq8_nil closure;
			com.altova.mapforce.IEnumerable var2_nil;
			public Enumerator(seq8_nil closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_nil = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("nil", "http://www.w3.org/2001/XMLSchema-instance"), closure.var1_cur));
				if (!((Boolean)com.altova.functions.Core.first((new seq6_if_exists(var2_nil))))) {state = 2; return false; }
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.nodeToString(closure.var1_cur);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class Outer implements IEnumerable
	{
	
		public Outer()
		{
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var1_map;
			public Enumerator(Outer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var1_map = ((new main())).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var1_map.moveNext()) {state = 3; return false; }
				current = var1_map.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var1_map != null ) { var1_map.close(); var1_map = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var1_map != null ) { var1_map.close(); var1_map = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances


	// main entry point

	public void run() throws Exception {
		// Open the source(s)

		// Create the target

		// Execute mapping

		main mapping = new main();

		for (IEnumerator en = mapping.enumerator(); en.moveNext();)
		{
		  MFDocument doc = (MFDocument) en.current();
		org.w3c.dom.Document PersonList2Doc = XmlTreeOperations.createDocument();
		  com.altova.io.Output PersonList2Target = new com.altova.io.FileOutput(doc.getFilename());
		  com.altova.xml.MFDOMWriter.write(doc.select(IMFNode.MFQueryKind_All, null), PersonList2Doc);
		XmlTreeOperations.saveDocument(PersonList2Doc, PersonList2Target, "UTF-8", false, false, true, false);
		  PersonList2Target.close();
		}

	}



}
