/**
 * MappingMapToTemperatures.java
 *
 * This file was generated by MapForce 2019.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.mapforce;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import java.util.*;

public class MappingMapToTemperatures extends com.altova.TraceProvider 
{
	private boolean runDoesCloseAll = true;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}

	
	static class main implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_Temperatures_Instance;
		com.altova.mapforce.IEnumerable var2_upper;
		com.altova.mapforce.IEnumerable var3_lower;
	
		public main(com.altova.mapforce.IMFNode var1_Temperatures_Instance, com.altova.mapforce.IEnumerable var2_upper, com.altova.mapforce.IEnumerable var3_lower)
		{
			this.var1_Temperatures_Instance = var1_Temperatures_Instance;
			this.var2_upper = var2_upper;
			this.var3_lower = var3_lower;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 2;
			Object current;
			main closure;
			java.math.BigDecimal var4_if_exists;
			java.math.BigDecimal var5_if_exists;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_2() throws Exception {
				state = 3;				
				var4_if_exists = (java.math.BigDecimal)com.altova.functions.Core.first((new seq1_if_exists(closure.var3_lower)));
				var5_if_exists = (java.math.BigDecimal)com.altova.functions.Core.first((new seq2_if_exists(closure.var2_upper)));
				current = com.altova.functions.Core.createProcessingInstruction("ClassifyTemperatures.sps", "altova_sps");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				current = com.altova.functions.Core.createComment("Generated by Altova MapForce (http://www.altova.com/mapforce)");
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 5;				
				current = com.altova.functions.Core.createComment(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat("Input parameters: lower=", com.altova.CoreTypes.decimalToString(var4_if_exists)), ", upper="), com.altova.CoreTypes.decimalToString(var5_if_exists)));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("Temperatures", ""), (new seq3_join(closure.var1_Temperatures_Instance, var5_if_exists, var4_if_exists)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_if_exists implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_lower;
	
		public seq1_if_exists(com.altova.mapforce.IEnumerable var1_lower)
		{
			this.var1_lower = var1_lower;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_if_exists closure;
			public Enumerator(seq1_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_lower))) {state = 2; return false; }
				current = (java.math.BigDecimal)com.altova.functions.Core.first(closure.var1_lower);
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseDecimal("5");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_if_exists implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_upper;
	
		public seq2_if_exists(com.altova.mapforce.IEnumerable var1_upper)
		{
			this.var1_upper = var1_upper;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_if_exists closure;
			public Enumerator(seq2_if_exists closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var1_upper))) {state = 2; return false; }
				current = (java.math.BigDecimal)com.altova.functions.Core.first(closure.var1_upper);
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseDecimal("20");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_Temperatures_Instance;
		java.math.BigDecimal var2_if_exists;
		java.math.BigDecimal var3_if_exists;
	
		public seq3_join(com.altova.mapforce.IMFNode var1_Temperatures_Instance, java.math.BigDecimal var2_if_exists, java.math.BigDecimal var3_if_exists)
		{
			this.var1_Temperatures_Instance = var1_Temperatures_Instance;
			this.var2_if_exists = var2_if_exists;
			this.var3_if_exists = var3_if_exists;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_join closure;
			IEnumerator var4_Temperatures;
			IEnumerator var5_data;
			com.altova.mapforce.IMFNode var6_temp;
			public Enumerator(seq3_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("xsi:noNamespaceSchemaLocation", "http://www.w3.org/2001/XMLSchema-instance"), com.altova.functions.Core.box("file:///C:/Users/A054680/Documents/Altova/MapForce2019/MapForceExamples/Temperatures.xsd"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var4_Temperatures = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Temperatures", ""), closure.var1_Temperatures_Instance)).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				if (!var4_Temperatures.moveNext()) {state = 4; return false; }
				var5_data = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("data", ""), ((com.altova.mapforce.IMFNode)(var4_Temperatures.current())))).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				if( var4_Temperatures != null ) { var4_Temperatures.close(); var4_Temperatures = null; }
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var5_data.moveNext()) {state = 6; return false; }
				var6_temp = (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("temp", ""), ((com.altova.mapforce.IMFNode)(var5_data.current()))));
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("data", ""), (new seq4_join(((com.altova.mapforce.IMFNode)(var5_data.current())), closure.var2_if_exists, var6_temp, closure.var3_if_exists)));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 3;				
				if( var5_data != null ) { var5_data.close(); var5_data = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var5_data != null ) { var5_data.close(); var5_data = null; }
				if( var4_Temperatures != null ) { var4_Temperatures.close(); var4_Temperatures = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq4_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur;
		java.math.BigDecimal var2_if_exists;
		com.altova.mapforce.IMFNode var3_temp;
		java.math.BigDecimal var4_if_exists;
	
		public seq4_join(com.altova.mapforce.IMFNode var1_cur, java.math.BigDecimal var2_if_exists, com.altova.mapforce.IMFNode var3_temp, java.math.BigDecimal var4_if_exists)
		{
			this.var1_cur = var1_cur;
			this.var2_if_exists = var2_if_exists;
			this.var3_temp = var3_temp;
			this.var4_if_exists = var4_if_exists;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq4_join closure;
			com.altova.mapforce.IMFNode var5_temp;
			IEnumerator var6_temp;
			public Enumerator(seq4_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("temp", ""), com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString(closure.var3_temp)))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("month", ""), com.altova.functions.Core.box(com.altova.CoreTypes.GYearMonthToString(com.altova.CoreTypes.parseGYearMonth(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("month", ""), closure.var1_cur)))))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var5_temp = closure.var3_temp;
				var6_temp = ((new seq5_cast(var5_temp, closure.var2_if_exists, closure.var4_if_exists))).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 4;				
				if (!var6_temp.moveNext()) {state = 5; return false; }
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("desc", ""), com.altova.functions.Core.box(((java.lang.String)(var6_temp.current()))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				if( var6_temp != null ) { var6_temp.close(); var6_temp = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var6_temp != null ) { var6_temp.close(); var6_temp = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq5_cast implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur;
		java.math.BigDecimal var2_if_exists;
		java.math.BigDecimal var3_if_exists;
	
		public seq5_cast(com.altova.mapforce.IMFNode var1_cur, java.math.BigDecimal var2_if_exists, java.math.BigDecimal var3_if_exists)
		{
			this.var1_cur = var1_cur;
			this.var2_if_exists = var2_if_exists;
			this.var3_if_exists = var3_if_exists;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq5_cast closure;
			java.math.BigDecimal var4_cast;
			public Enumerator(seq5_cast closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var4_cast = com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString(closure.var1_cur));
				if (!(com.altova.functions.Core.greater(var4_cast, closure.var2_if_exists))) {state = 2; return false; }
				current = "high";
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.less(var4_cast, closure.var3_if_exists))) {state = 0; return false; }
				current = "low";
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq6_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_upper;
	
		public seq6_map(com.altova.mapforce.IEnumerable var1_upper)
		{
			this.var1_upper = var1_upper;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq6_map closure;
			IEnumerator var2_upper;
			public Enumerator(seq6_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_upper = (closure.var1_upper).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_upper.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseDecimal(((java.lang.String)(var2_upper.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_upper != null ) { var2_upper.close(); var2_upper = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_upper != null ) { var2_upper.close(); var2_upper = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq7_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_lower;
	
		public seq7_map(com.altova.mapforce.IEnumerable var1_lower)
		{
			this.var1_lower = var1_lower;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq7_map closure;
			IEnumerator var2_lower;
			public Enumerator(seq7_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_lower = (closure.var1_lower).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_lower.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseDecimal(((java.lang.String)(var2_lower.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_lower != null ) { var2_lower.close(); var2_lower = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_lower != null ) { var2_lower.close(); var2_lower = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class Outer implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_Temperatures_Instance;
		com.altova.mapforce.IEnumerable var2_upper;
		com.altova.mapforce.IEnumerable var3_lower;
	
		public Outer(com.altova.mapforce.IMFNode var1_Temperatures_Instance, com.altova.mapforce.IEnumerable var2_upper, com.altova.mapforce.IEnumerable var3_lower)
		{
			this.var1_Temperatures_Instance = var1_Temperatures_Instance;
			this.var2_upper = var2_upper;
			this.var3_lower = var3_lower;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var4_if_exists;
			public Enumerator(Outer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var4_if_exists = ((new main(closure.var1_Temperatures_Instance, (new seq6_map(closure.var2_upper)), (new seq7_map(closure.var3_lower))))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var4_if_exists.moveNext()) {state = 3; return false; }
				current = var4_if_exists.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var4_if_exists != null ) { var4_if_exists.close(); var4_if_exists = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var4_if_exists != null ) { var4_if_exists.close(); var4_if_exists = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances
	protected org.w3c.dom.Node varTemperatures2Instance;
	protected java.math.BigDecimal varupper;
	protected java.math.BigDecimal varlower;

	public void run(String Temperatures2SourceFilename, java.math.BigDecimal upperSourceParameter, java.math.BigDecimal lowerSourceParameter, String Temperatures3TargetFilename) throws Exception {
		// open source streams
		writeTrace("Loading " + Temperatures2SourceFilename + "...\n");
		com.altova.io.FileInput Temperatures2Source = new com.altova.io.FileInput(Temperatures2SourceFilename);
		// open target stream
		com.altova.io.FileOutput Temperatures3Target = new com.altova.io.FileOutput(Temperatures3TargetFilename);

		// run
	
		run(Temperatures2Source, upperSourceParameter, lowerSourceParameter, Temperatures3Target);

		// close source streams
		Temperatures2Source.close();
		// close target stream
		writeTrace("Saving " + Temperatures3TargetFilename + "...\n");
		Temperatures3Target.close();
	}


	// main entry point

	public void run(com.altova.io.Input Temperatures2Source, java.math.BigDecimal upperSourceParameter, java.math.BigDecimal lowerSourceParameter, com.altova.io.Output Temperatures3Target) throws Exception {
		// Open the source(s)
		org.w3c.dom.Document doc_Temperatures2 = XmlTreeOperations.loadDocument(Temperatures2Source);
		varTemperatures2Instance = doc_Temperatures2;
		if (runDoesCloseAll)
			Temperatures2Source.close();
			varupper = upperSourceParameter;

			varlower = lowerSourceParameter;


		// Create the target
		org.w3c.dom.Document Temperatures3Doc = (Temperatures3Target.getType() == com.altova.io.Output.IO_DOM) ? Temperatures3Target.getDocument() : XmlTreeOperations.createDocument();

		// Execute mapping

		main mapping = new main(new com.altova.xml.DOMDocumentAsMFNodeAdapter(varTemperatures2Instance, Temperatures2Source.getFilename()), upperSourceParameter != null ? com.altova.functions.Core.box(upperSourceParameter) : new com.altova.mapforce.MFEmptySequence(), lowerSourceParameter != null ? com.altova.functions.Core.box(lowerSourceParameter) : new com.altova.mapforce.MFEmptySequence());

		com.altova.xml.MFDOMWriter.write(mapping, Temperatures3Doc);
		// Close the target
		XmlTreeOperations.saveDocument(Temperatures3Doc, Temperatures3Target, "UTF-8", false, false, true, false);

		
		if (runDoesCloseAll)
		{
			Temperatures2Source.close();
			Temperatures3Target.close();
		}
	}



}
